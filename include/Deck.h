/**
 * @file Deck.h
 * @brief The declaration of the Deck class and its functions.
 * @author Anthony Gavriel
 * @date 30/06/2023
 */

#ifndef BLACKJACK_DECK_H
#define BLACKJACK_DECK_H

#include <iostream>
#include <vector>
#include <random>

#include "Card.h"

/**
 * @class Deck
 * @brief The deck of cards used to play the game
 *
 * A deck is a vector containing the 52 unique cards which make up a standard deck.
 * The constructor uses the private function `create()` to instantiate the deck.
 * A deck is not shuffled by default when an instance is created.
 */
class Deck {
public:
    /**
     * @brief Constructor for a Deck object.
     *
     * Creates an instance of a deck, an object containing 52 unique cards.
     */
    Deck();

    /**
     * @brief Shuffles the cards in the deck vector.
     *
     * Shuffles by:
     * - Creating an instance of std::random_device (a truly random number generator)
     * - Creating an instance of std::default_random_engine with a seed generated by rdm_device()
     * - Calling std::shuffle to rearrange elements from start to end of the deck in a random order
     */
    void shuffle();

    /**
     * @brief Pops and returns a card from the deck.
     *
     * Removes the card from the "back" - deck.at(deck.size()-1).
     * Reduces the size of the deck by 1.
     *
     * @return The card popped from the deck.
     */
    Card removeCard();

    /**
     * @brief A getter function returning the deck variable.
     *
     * @return The deck as a vector of cards.
     */
    std::vector<Card> getDeck();

    /**
     * @brief A getter function returning the size variable.
     *
     * @return The size of the deck as an integer.
     */
    int getSize();

private:
    /**
     * @brief Overloads the `==` operator to compare two decks.
     *
     * As the cards in any deck are always the same, only the order is considered.
     * A deck is considered unequal only if the cards are in different order.
     * This operator is overloaded for comparing decks during tests.
     *
     * @param deck1 A reference to a deck object.
     * @param deck2 A reference to a deck object.
     * @return True if the decks are the same, otherwise false.
     */
    friend bool operator==(const Deck& deck1, const Deck& deck2);

    /**
     * @brief Overloads the `!=` operator to compare two decks
     *
     * This operator is overloaded from comparing decks during tests.
     *
     * @param deck1 A reference to a deck object.
     * @param deck2 A reference to a deck object.
     * @return True if the decks are different, otherwise false.
     */
    friend bool operator!=(const Deck& deck1, const Deck& deck2);

    /**
     * @brief Creates a deck by iterating through the suit and values of a classic deck of cards.
     *
     * An iterator is setup to go through the suits one by one.
     * For each suit, the values are iterated and both the suit and value are assigned to the card.
     * Once the suit and value are determined, the ASCII representation of the card is set.
     *
     * The cards, once instantiated, are pushed onto the `deck` vector.
     */
    void create();

    /**
     * @brief The vector of cards used in the game.
     */
    std::vector<Card> deck;
};

#endif //BLACKJACK_DECK_H