//
// Created by Anthony Gavriel on 30/06/2023.
//

#include "../include/Deck.h"
#include "../include/Player.h"

/**
 * Default constructor for Deck object
 */
Deck::Deck() = default;

/**
 * A getter function returning the deck variable
 *
 * @return a vector of Card objects - essentially, the deck
 */
std::vector<Card> Deck::getDeck() {
    return deck;
}

/**
 * Creates a deck by iterating through suit and values
 * For each suit, the value is iterated and assigned to the Card
 * Once the suit and value have been determined, the ASCII representation is set for the Card
 *
 * Cards instantiated in the loop populate the `deck` variable
 */
void Deck::create() {
    for(int i = 0; i < Card::enumSuitEnd; i++) {
        for(int j = 2; j < Card::enumValueEnd; j++) {
            auto suit = (Card::Suit) i;
            auto value = (Card::Value) j;
            Card card(suit, value);

            // Sets ASCII representation for Card by suit and value
            switch(i) {
                case 0:
                    card.setDiamondAscii(j);
                    break;
                case 1:
                    card.setSpadeAscii(j);
                    break;
                case 2:
                    card.setClubAscii(j);
                    break;
                case 3:
                    card.setHeartAscii(j);
                    break;
                default:
                    std::cout << "Error setting Ascii";
            }
            deck.push_back(card);
        }
    }
}

/**
 * Function to shuffle the Card objects saved in the deck
 *
 * Shuffles by:
 * - Creating an instance of std::random_device (a truly random number generator)
 * - Creating an instance of std::default_random_engine with a seed generated by rdm_device()
 * - Calling std::shuffle to rearrange elements from start to end of the deck in a random order
 */
void Deck::shuffle() {
    auto rdm_device = std::random_device {};
    auto rng = std::default_random_engine {
            rdm_device()
    };
    std::shuffle(std::begin(deck), std::end(deck), rng);
}

/**
 * Used to remove a Card object from the deck and return it for playing
 * Card is removed from the bottom of the deck instead of the top
 * Feels better imagining deck.at(0) is the front of the deck
 * deck.at(deck.size()-1) is the next Card if the stack was upside down on a table
 *
 * @return Card taken off the deck
 */
Card Deck::removeCard() {
    if(deck.empty()) {
//        Create deck and shuffle
        create();
        shuffle();
    }
    Card card = deck.at(deck.size()-1);
    deck.pop_back();
    return card;
}

/**
 * A getter function returning the size variable
 *
 * @return the size of the deck
 */
int Deck::getSize() {
    return int(deck.size());
}